{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport firebase from \"../../../../utils/firebase\";\n\n// Custom hook for managing chat messages and sending new messages\nconst useChatMessages = (currentUserUid, receiverUid) => {\n  _s();\n  // Set up local state for chat messages\n  const [messages, setMessages] = useState([]);\n\n  // Subscribe to messages collection for this chat and update state\n  useEffect(() => {\n    const fetchMessages = () => {\n      // Calculate chat ID based on UIDs of current user and receiver\n      const chatId = currentUserUid > receiverUid ? `${currentUserUid}-${receiverUid}` : `${receiverUid}-${currentUserUid}`;\n\n      // Subscribe to messages collection and update state on changes\n      const messagesRef = firebase.firestore().collection(\"chats\").doc(chatId).collection(\"messages\");\n      const unsubscribe = messagesRef.orderBy(\"timestamp\", \"asc\").onSnapshot(snapshot => {\n        const messagesData = snapshot.docs.map(doc => ({\n          ...doc.data(),\n          messageId: doc.id\n        }));\n        setMessages(messagesData);\n      });\n      return unsubscribe;\n    };\n\n    // Call fetchMessages function to subscribe to messages collection\n    return fetchMessages();\n  }, [currentUserUid, receiverUid]);\n\n  // Function for sending a new message\n  const sendMessage = async messageText => {\n    // Calculate chat ID based on UIDs of current user and receiver\n    const chatId = currentUserUid > receiverUid ? `${currentUserUid}-${receiverUid}` : `${receiverUid}-${currentUserUid}`;\n\n    // Reference messages collection for this chat and add new message\n    const messagesRef = firebase.firestore().collection(\"chats\").doc(chatId).collection(\"messages\");\n\n    // Get current user's display name\n    const currentUser = await getCurrentUser(currentUserUid);\n\n    // Add new message to messages collection\n    await messagesRef.add({\n      sender: currentUserUid,\n      senderDisplayName: currentUser.username,\n      receiver: receiverUid,\n      text: messageText,\n      timestamp: Date.now()\n    });\n  };\n\n  // Function for getting current user's display name from Firestore\n  const getCurrentUser = async currentUserUid => {\n    const userRef = firebase.firestore().collection(\"users\").doc(currentUserUid);\n    const userDoc = await userRef.get();\n    return userDoc.data();\n  };\n\n  // Return chat messages and sendMessage function\n  return {\n    messages,\n    sendMessage\n  };\n};\n_s(useChatMessages, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\nexport default useChatMessages;","map":{"version":3,"names":["useEffect","useState","firebase","useChatMessages","currentUserUid","receiverUid","_s","messages","setMessages","fetchMessages","chatId","messagesRef","firestore","collection","doc","unsubscribe","orderBy","onSnapshot","snapshot","messagesData","docs","map","data","messageId","id","sendMessage","messageText","currentUser","getCurrentUser","add","sender","senderDisplayName","username","receiver","text","timestamp","Date","now","userRef","userDoc","get"],"sources":["C:/Users/bashc/OneDrive/Documents/Kaar Documents/HappyHelperFinal/src/components/Chat/ChatMessages/utils/useChatMessages.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport firebase from \"../../../../utils/firebase\";\r\n\r\n// Custom hook for managing chat messages and sending new messages\r\nconst useChatMessages = (currentUserUid, receiverUid) => {\r\n  // Set up local state for chat messages\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // Subscribe to messages collection for this chat and update state\r\n  useEffect(() => {\r\n    const fetchMessages = () => {\r\n      // Calculate chat ID based on UIDs of current user and receiver\r\n      const chatId =\r\n        currentUserUid > receiverUid\r\n          ? `${currentUserUid}-${receiverUid}`\r\n          : `${receiverUid}-${currentUserUid}`;\r\n\r\n      // Subscribe to messages collection and update state on changes\r\n      const messagesRef = firebase\r\n        .firestore()\r\n        .collection(\"chats\")\r\n        .doc(chatId)\r\n        .collection(\"messages\");\r\n\r\n      const unsubscribe = messagesRef\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) => {\r\n          const messagesData = snapshot.docs.map((doc) => ({\r\n            ...doc.data(),\r\n            messageId: doc.id,\r\n          }));\r\n          setMessages(messagesData);\r\n        });\r\n\r\n      return unsubscribe;\r\n    };\r\n\r\n    // Call fetchMessages function to subscribe to messages collection\r\n    return fetchMessages();\r\n  }, [currentUserUid, receiverUid]);\r\n\r\n  // Function for sending a new message\r\n  const sendMessage = async (messageText) => {\r\n    // Calculate chat ID based on UIDs of current user and receiver\r\n    const chatId =\r\n      currentUserUid > receiverUid\r\n        ? `${currentUserUid}-${receiverUid}`\r\n        : `${receiverUid}-${currentUserUid}`;\r\n\r\n    // Reference messages collection for this chat and add new message\r\n    const messagesRef = firebase\r\n      .firestore()\r\n      .collection(\"chats\")\r\n      .doc(chatId)\r\n      .collection(\"messages\");\r\n\r\n    // Get current user's display name\r\n    const currentUser = await getCurrentUser(currentUserUid);\r\n\r\n    // Add new message to messages collection\r\n    await messagesRef.add({\r\n      sender: currentUserUid,\r\n      senderDisplayName: currentUser.username,\r\n      receiver: receiverUid,\r\n      text: messageText,\r\n      timestamp: Date.now(),\r\n    });\r\n  };\r\n\r\n  // Function for getting current user's display name from Firestore\r\n  const getCurrentUser = async (currentUserUid) => {\r\n    const userRef = firebase\r\n      .firestore()\r\n      .collection(\"users\")\r\n      .doc(currentUserUid);\r\n    const userDoc = await userRef.get();\r\n    return userDoc.data();\r\n  };\r\n\r\n  // Return chat messages and sendMessage function\r\n  return { messages, sendMessage };\r\n};\r\n\r\nexport default useChatMessages;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,4BAA4B;;AAEjD;AACA,MAAMC,eAAe,GAAGA,CAACC,cAAc,EAAEC,WAAW,KAAK;EAAAC,EAAA;EACvD;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAD,SAAS,CAAC,MAAM;IACd,MAAMS,aAAa,GAAGA,CAAA,KAAM;MAC1B;MACA,MAAMC,MAAM,GACVN,cAAc,GAAGC,WAAW,GACvB,GAAED,cAAe,IAAGC,WAAY,EAAC,GACjC,GAAEA,WAAY,IAAGD,cAAe,EAAC;;MAExC;MACA,MAAMO,WAAW,GAAGT,QAAQ,CACzBU,SAAS,EAAE,CACXC,UAAU,CAAC,OAAO,CAAC,CACnBC,GAAG,CAACJ,MAAM,CAAC,CACXG,UAAU,CAAC,UAAU,CAAC;MAEzB,MAAME,WAAW,GAAGJ,WAAW,CAC5BK,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,CAC3BC,UAAU,CAAEC,QAAQ,IAAK;QACxB,MAAMC,YAAY,GAAGD,QAAQ,CAACE,IAAI,CAACC,GAAG,CAAEP,GAAG,KAAM;UAC/C,GAAGA,GAAG,CAACQ,IAAI,EAAE;UACbC,SAAS,EAAET,GAAG,CAACU;QACjB,CAAC,CAAC,CAAC;QACHhB,WAAW,CAACW,YAAY,CAAC;MAC3B,CAAC,CAAC;MAEJ,OAAOJ,WAAW;IACpB,CAAC;;IAED;IACA,OAAON,aAAa,EAAE;EACxB,CAAC,EAAE,CAACL,cAAc,EAAEC,WAAW,CAAC,CAAC;;EAEjC;EACA,MAAMoB,WAAW,GAAG,MAAOC,WAAW,IAAK;IACzC;IACA,MAAMhB,MAAM,GACVN,cAAc,GAAGC,WAAW,GACvB,GAAED,cAAe,IAAGC,WAAY,EAAC,GACjC,GAAEA,WAAY,IAAGD,cAAe,EAAC;;IAExC;IACA,MAAMO,WAAW,GAAGT,QAAQ,CACzBU,SAAS,EAAE,CACXC,UAAU,CAAC,OAAO,CAAC,CACnBC,GAAG,CAACJ,MAAM,CAAC,CACXG,UAAU,CAAC,UAAU,CAAC;;IAEzB;IACA,MAAMc,WAAW,GAAG,MAAMC,cAAc,CAACxB,cAAc,CAAC;;IAExD;IACA,MAAMO,WAAW,CAACkB,GAAG,CAAC;MACpBC,MAAM,EAAE1B,cAAc;MACtB2B,iBAAiB,EAAEJ,WAAW,CAACK,QAAQ;MACvCC,QAAQ,EAAE5B,WAAW;MACrB6B,IAAI,EAAER,WAAW;MACjBS,SAAS,EAAEC,IAAI,CAACC,GAAG;IACrB,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMT,cAAc,GAAG,MAAOxB,cAAc,IAAK;IAC/C,MAAMkC,OAAO,GAAGpC,QAAQ,CACrBU,SAAS,EAAE,CACXC,UAAU,CAAC,OAAO,CAAC,CACnBC,GAAG,CAACV,cAAc,CAAC;IACtB,MAAMmC,OAAO,GAAG,MAAMD,OAAO,CAACE,GAAG,EAAE;IACnC,OAAOD,OAAO,CAACjB,IAAI,EAAE;EACvB,CAAC;;EAED;EACA,OAAO;IAAEf,QAAQ;IAAEkB;EAAY,CAAC;AAClC,CAAC;AAACnB,EAAA,CA7EIH,eAAe;AA+ErB,eAAeA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}