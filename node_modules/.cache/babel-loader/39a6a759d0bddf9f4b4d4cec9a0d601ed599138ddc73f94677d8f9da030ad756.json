{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nexport const updateDarkMode = createAsyncThunk(\"darkMode/updateDarkMode\", async (darkMode, _ref) => {\n  let {\n    getState\n  } = _ref;\n  const currentUser = firebase.auth().currentUser;\n  if (currentUser) {\n    // Update the user's document in the database with the new dark mode status\n    console.log(\"Updating dark mode status in database...\");\n    await firebase.firestore().collection(\"users\").doc(currentUser.uid).update({\n      darkMode: darkMode\n    });\n  }\n});\nexport const darkModeSlice = createSlice({\n  name: \"darkMode\",\n  initialState: {\n    // Read the initial dark mode value from the session storage or default to false\n    darkMode: JSON.parse(sessionStorage.getItem(\"darkMode\")) || false\n  },\n  reducers: {\n    setDarkMode: (state, action) => {\n      // Save the dark mode value in the session storage\n      sessionStorage.setItem(\"darkMode\", JSON.stringify(!action.payload));\n\n      // Update the Redux state\n      state.darkMode = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(updateDarkMode.fulfilled, (state, action) => {\n      // Update the local state when the user's document in the database is successfully updated\n      state.darkMode = action.meta.arg;\n    }).addDefaultCase((state, action) => {});\n  }\n});\nexport const {\n  setDarkMode\n} = darkModeSlice.actions;\nexport const selectDarkMode = state => state.darkMode.darkMode;\nexport default darkModeSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","firebase","updateDarkMode","darkMode","_ref","getState","currentUser","auth","console","log","firestore","collection","doc","uid","update","darkModeSlice","name","initialState","JSON","parse","sessionStorage","getItem","reducers","setDarkMode","state","action","setItem","stringify","payload","extraReducers","builder","addCase","fulfilled","meta","arg","addDefaultCase","actions","selectDarkMode","reducer"],"sources":["C:/Users/bashc/OneDrive/Documents/Kaar Documents/HappyHelperFinal/src/store/features/darkMode/darkModeSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport firebase from \"firebase/compat/app\";\r\nimport \"firebase/compat/firestore\";\r\n\r\nexport const updateDarkMode = createAsyncThunk(\"darkMode/updateDarkMode\", async (darkMode, { getState }) => {\r\n  const currentUser = firebase.auth().currentUser;\r\n  if (currentUser) {\r\n    // Update the user's document in the database with the new dark mode status\r\n    console.log(\"Updating dark mode status in database...\");\r\n    await firebase.firestore().collection(\"users\").doc(currentUser.uid).update({\r\n      darkMode: darkMode,\r\n    });\r\n  }\r\n});\r\nexport const darkModeSlice = createSlice({\r\n  name: \"darkMode\",\r\n  initialState: {\r\n    // Read the initial dark mode value from the session storage or default to false\r\n    darkMode: JSON.parse(sessionStorage.getItem(\"darkMode\")) || false,\r\n  },\r\n  reducers: {\r\n    setDarkMode: (state, action) => {\r\n      // Save the dark mode value in the session storage\r\n      sessionStorage.setItem(\"darkMode\", JSON.stringify(!action.payload));\r\n\r\n      // Update the Redux state\r\n      state.darkMode = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(updateDarkMode.fulfilled, (state, action) => {\r\n        // Update the local state when the user's document in the database is successfully updated\r\n        state.darkMode = action.meta.arg;\r\n      })\r\n      .addDefaultCase((state, action) => {});\r\n  },\r\n});\r\n\r\nexport const { setDarkMode } = darkModeSlice.actions;\r\nexport const selectDarkMode = (state) => state.darkMode.darkMode;\r\nexport default darkModeSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAO,2BAA2B;AAElC,OAAO,MAAMC,cAAc,GAAGH,gBAAgB,CAAC,yBAAyB,EAAE,OAAOI,QAAQ,EAAAC,IAAA,KAAmB;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAD,IAAA;EACrG,MAAME,WAAW,GAAGL,QAAQ,CAACM,IAAI,EAAE,CAACD,WAAW;EAC/C,IAAIA,WAAW,EAAE;IACf;IACAE,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACvD,MAAMR,QAAQ,CAACS,SAAS,EAAE,CAACC,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACN,WAAW,CAACO,GAAG,CAAC,CAACC,MAAM,CAAC;MACzEX,QAAQ,EAAEA;IACZ,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AACF,OAAO,MAAMY,aAAa,GAAGf,WAAW,CAAC;EACvCgB,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE;IACZ;IACAd,QAAQ,EAAEe,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI;EAC9D,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAW,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC9B;MACAL,cAAc,CAACM,OAAO,CAAC,UAAU,EAAER,IAAI,CAACS,SAAS,CAAC,CAACF,MAAM,CAACG,OAAO,CAAC,CAAC;;MAEnE;MACAJ,KAAK,CAACrB,QAAQ,GAAGsB,MAAM,CAACG,OAAO;IACjC;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC7B,cAAc,CAAC8B,SAAS,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MACpD;MACAD,KAAK,CAACrB,QAAQ,GAAGsB,MAAM,CAACQ,IAAI,CAACC,GAAG;IAClC,CAAC,CAAC,CACDC,cAAc,CAAC,CAACX,KAAK,EAAEC,MAAM,KAAK,CAAC,CAAC,CAAC;EAC1C;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEF;AAAY,CAAC,GAAGR,aAAa,CAACqB,OAAO;AACpD,OAAO,MAAMC,cAAc,GAAIb,KAAK,IAAKA,KAAK,CAACrB,QAAQ,CAACA,QAAQ;AAChE,eAAeY,aAAa,CAACuB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}