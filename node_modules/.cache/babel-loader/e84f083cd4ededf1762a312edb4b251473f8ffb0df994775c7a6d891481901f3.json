{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bashc\\\\OneDrive\\\\Documents\\\\Kaar Documents\\\\HappyHelperFinal\\\\src\\\\components\\\\Chat\\\\UserList\\\\UserList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./UserList.css\";\nimport useFetchUsers from \"./useFetchUsers\";\nimport { TextField, Typography } from \"@mui/material\";\nimport UsersListItems from \"./UsersListItems\";\nimport UsersListSkeleton from \"./UsersListItems/Skeleton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UsersList = () => {\n  _s();\n  // State for search input value and loading indicator\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n\n  // Get current user from Redux state\n  const currentUser = useSelector(state => state.auth.user);\n  // Custom hook for fetching users and their chats/messages\n  const {\n    users,\n    filterChat\n  } = useFetchUsers(currentUser.uid, setLoading);\n\n  // Update search input value\n  const handleSearch = e => setSearchValue(e.target.value);\n\n  // Filter users based on search input value and current user's chats/messages\n  const filteredUsers = getFilteredUsers(users, filterChat, searchValue, currentUser.uid);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"users-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      fontWeight: \"bold\",\n      className: \"users-list-title\",\n      children: \"Users List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      searchValue: searchValue,\n      handleSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(UsersListSkeleton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 18\n    }, this) : \"\", !loading && filteredUsers.length > 0 ? /*#__PURE__*/_jsxDEV(UsersListItems, {\n      users: filteredUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this) : !loading && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      className: \"no-users-message\",\n      paddingTop: 5,\n      children: \"Search a username to send message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n// Function to filter users based on search input value and current user's chats/messages\n_s(UsersList, \"jM3DysGnBCc/RaP4f27p6Ds897Y=\", false, function () {\n  return [useSelector, useFetchUsers];\n});\n_c = UsersList;\nconst getFilteredUsers = (users, filterChat, searchValue, currentUserUid) => {\n  // Helper function to get user data by UID\n  const getUserByUid = uid => users.find(user => user.uid === uid);\n\n  // If search input is empty, filter users based on current user's chats/messages\n  console.log(\"filterChat\", filterChat);\n  if (searchValue.trim() === \"\") {\n    return filterChat.sort((a, b) => b.lastMessage.timestamp - a.lastMessage.timestamp) // sort filterChat array in descending order based on lastMessage.timestamp\n    .map(chat => ({\n      ...getUserByUid(chat.id.replace(currentUserUid, \"\").replace(\"-\", \"\")),\n      lastMessage: chat.lastMessage\n    }));\n  }\n  // If search input has value, filter users based on username\n  else {\n    return users.filter(user => user.username.toLowerCase().includes(searchValue.toLowerCase()));\n  }\n};\n\n// Search input component\nconst SearchBox = _ref => {\n  let {\n    searchValue,\n    handleSearch\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(TextField, {\n    value: searchValue,\n    onChange: handleSearch,\n    placeholder: \"Search for users...\",\n    className: \"search-box\",\n    sx: {\n      mt: 2\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 3\n  }, this);\n};\n_c2 = SearchBox;\nexport default UsersList;\nvar _c, _c2;\n$RefreshReg$(_c, \"UsersList\");\n$RefreshReg$(_c2, \"SearchBox\");","map":{"version":3,"names":["React","useState","useSelector","useFetchUsers","TextField","Typography","UsersListItems","UsersListSkeleton","jsxDEV","_jsxDEV","UsersList","_s","searchValue","setSearchValue","loading","setLoading","currentUser","state","auth","user","users","filterChat","uid","handleSearch","e","target","value","filteredUsers","getFilteredUsers","className","children","variant","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","SearchBox","length","paddingTop","_c","currentUserUid","getUserByUid","find","console","log","trim","sort","a","b","lastMessage","timestamp","map","chat","id","replace","filter","username","toLowerCase","includes","_ref","onChange","placeholder","sx","mt","_c2","$RefreshReg$"],"sources":["C:/Users/bashc/OneDrive/Documents/Kaar Documents/HappyHelperFinal/src/components/Chat/UserList/UserList.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./UserList.css\";\r\nimport useFetchUsers from \"./useFetchUsers\";\r\nimport { TextField, Typography } from \"@mui/material\";\r\nimport UsersListItems from \"./UsersListItems\";\r\nimport UsersListSkeleton from \"./UsersListItems/Skeleton\";\r\n\r\nconst UsersList = () => {\r\n  // State for search input value and loading indicator\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Get current user from Redux state\r\n  const currentUser = useSelector((state) => state.auth.user);\r\n  // Custom hook for fetching users and their chats/messages\r\n  const { users, filterChat } = useFetchUsers(currentUser.uid, setLoading);\r\n\r\n  // Update search input value\r\n  const handleSearch = (e) => setSearchValue(e.target.value);\r\n\r\n  // Filter users based on search input value and current user's chats/messages\r\n  const filteredUsers = getFilteredUsers(users, filterChat, searchValue, currentUser.uid);\r\n\r\n  return (\r\n    <div className=\"users-list-container\">\r\n      <Typography variant=\"h4\" fontWeight=\"bold\" className=\"users-list-title\">\r\n        Users List\r\n      </Typography>\r\n      {/* Search input */}\r\n      <SearchBox searchValue={searchValue} handleSearch={handleSearch} />\r\n      {/* Loading indicator */}\r\n      {loading ? <UsersListSkeleton /> : \"\"}\r\n      {/* List of filtered users */}\r\n      {!loading && filteredUsers.length > 0 ? (\r\n        <UsersListItems users={filteredUsers} />\r\n      ) : (\r\n        !loading && (\r\n          <Typography variant=\"body1\" className=\"no-users-message\" paddingTop={5}>\r\n            Search a username to send message\r\n          </Typography>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Function to filter users based on search input value and current user's chats/messages\r\nconst getFilteredUsers = (users, filterChat, searchValue, currentUserUid) => {\r\n  // Helper function to get user data by UID\r\n  const getUserByUid = (uid) => users.find((user) => user.uid === uid);\r\n\r\n  // If search input is empty, filter users based on current user's chats/messages\r\n  console.log(\"filterChat\", filterChat);\r\n  if (searchValue.trim() === \"\") {\r\n    return filterChat\r\n      .sort((a, b) => b.lastMessage.timestamp - a.lastMessage.timestamp) // sort filterChat array in descending order based on lastMessage.timestamp\r\n      .map((chat) => ({\r\n        ...getUserByUid(chat.id.replace(currentUserUid, \"\").replace(\"-\", \"\")),\r\n        lastMessage: chat.lastMessage,\r\n      }));\r\n  }\r\n  // If search input has value, filter users based on username\r\n  else {\r\n    return users.filter((user) => user.username.toLowerCase().includes(searchValue.toLowerCase()));\r\n  }\r\n};\r\n\r\n// Search input component\r\nconst SearchBox = ({ searchValue, handleSearch }) => (\r\n  <TextField value={searchValue} onChange={handleSearch} placeholder=\"Search for users...\" className=\"search-box\" sx={{ mt: 2 }} />\r\n);\r\n\r\nexport default UsersList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAO,gBAAgB;AACvB,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,SAASC,SAAS,EAAEC,UAAU,QAAQ,eAAe;AACrD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,iBAAiB,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMe,WAAW,GAAGd,WAAW,CAAEe,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACC,IAAI,CAAC;EAC3D;EACA,MAAM;IAAEC,KAAK;IAAEC;EAAW,CAAC,GAAGlB,aAAa,CAACa,WAAW,CAACM,GAAG,EAAEP,UAAU,CAAC;;EAExE;EACA,MAAMQ,YAAY,GAAIC,CAAC,IAAKX,cAAc,CAACW,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;;EAE1D;EACA,MAAMC,aAAa,GAAGC,gBAAgB,CAACR,KAAK,EAAEC,UAAU,EAAET,WAAW,EAAEI,WAAW,CAACM,GAAG,CAAC;EAEvF,oBACEb,OAAA;IAAKoB,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACnCrB,OAAA,CAACJ,UAAU;MAAC0B,OAAO,EAAC,IAAI;MAACC,UAAU,EAAC,MAAM;MAACH,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAAC;IAExE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAa,eAEb3B,OAAA,CAAC4B,SAAS;MAACzB,WAAW,EAAEA,WAAY;MAACW,YAAY,EAAEA;IAAa;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,EAElEtB,OAAO,gBAAGL,OAAA,CAACF,iBAAiB;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,GAAG,EAAE,EAEpC,CAACtB,OAAO,IAAIa,aAAa,CAACW,MAAM,GAAG,CAAC,gBACnC7B,OAAA,CAACH,cAAc;MAACc,KAAK,EAAEO;IAAc;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,GAExC,CAACtB,OAAO,iBACNL,OAAA,CAACJ,UAAU;MAAC0B,OAAO,EAAC,OAAO;MAACF,SAAS,EAAC,kBAAkB;MAACU,UAAU,EAAE,CAAE;MAAAT,QAAA,EAAC;IAExE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAEH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEV,CAAC;;AAED;AAAAzB,EAAA,CAvCMD,SAAS;EAAA,QAMOR,WAAW,EAEDC,aAAa;AAAA;AAAAqC,EAAA,GARvC9B,SAAS;AAwCf,MAAMkB,gBAAgB,GAAGA,CAACR,KAAK,EAAEC,UAAU,EAAET,WAAW,EAAE6B,cAAc,KAAK;EAC3E;EACA,MAAMC,YAAY,GAAIpB,GAAG,IAAKF,KAAK,CAACuB,IAAI,CAAExB,IAAI,IAAKA,IAAI,CAACG,GAAG,KAAKA,GAAG,CAAC;;EAEpE;EACAsB,OAAO,CAACC,GAAG,CAAC,YAAY,EAAExB,UAAU,CAAC;EACrC,IAAIT,WAAW,CAACkC,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7B,OAAOzB,UAAU,CACd0B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,WAAW,CAACC,SAAS,GAAGH,CAAC,CAACE,WAAW,CAACC,SAAS,CAAC,CAAC;IAAA,CAClEC,GAAG,CAAEC,IAAI,KAAM;MACd,GAAGX,YAAY,CAACW,IAAI,CAACC,EAAE,CAACC,OAAO,CAACd,cAAc,EAAE,EAAE,CAAC,CAACc,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;MACrEL,WAAW,EAAEG,IAAI,CAACH;IACpB,CAAC,CAAC,CAAC;EACP;EACA;EAAA,KACK;IACH,OAAO9B,KAAK,CAACoC,MAAM,CAAErC,IAAI,IAAKA,IAAI,CAACsC,QAAQ,CAACC,WAAW,EAAE,CAACC,QAAQ,CAAC/C,WAAW,CAAC8C,WAAW,EAAE,CAAC,CAAC;EAChG;AACF,CAAC;;AAED;AACA,MAAMrB,SAAS,GAAGuB,IAAA;EAAA,IAAC;IAAEhD,WAAW;IAAEW;EAAa,CAAC,GAAAqC,IAAA;EAAA,oBAC9CnD,OAAA,CAACL,SAAS;IAACsB,KAAK,EAAEd,WAAY;IAACiD,QAAQ,EAAEtC,YAAa;IAACuC,WAAW,EAAC,qBAAqB;IAACjC,SAAS,EAAC,YAAY;IAACkC,EAAE,EAAE;MAAEC,EAAE,EAAE;IAAE;EAAE;IAAA/B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AAAA,CAClI;AAAC6B,GAAA,GAFI5B,SAAS;AAIf,eAAe3B,SAAS;AAAC,IAAA8B,EAAA,EAAAyB,GAAA;AAAAC,YAAA,CAAA1B,EAAA;AAAA0B,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}