{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bashc\\\\OneDrive\\\\Documents\\\\Kaar Documents\\\\HappyHelperFinal\\\\src\\\\components\\\\MoodTracker\\\\MoodLogging\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createMood, getMoods } from \"../../../store/features/mood/moodSlice\";\nimport { Button, Typography, Slider, Box, Grow } from \"@mui/material\";\nimport { styled } from \"@mui/system\";\nimport { motion } from \"framer-motion\";\nimport \"./logging.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoodLogging = () => {\n  _s();\n  // Initialize Redux hooks and local state\n  const dispatch = useDispatch();\n  const userId = useSelector(state => state.auth.user.uid);\n  const [moodValue, setMoodValue] = useState(5);\n\n  // Define mood emoticons\n  const emoticons = [\"😭\", \"😢\", \"😔\", \"😐\", \"🙂\", \"😀\", \"😄\", \"😁\", \"😆\", \"😍\"];\n\n  // Handle mood logging by dispatching Redux actions\n  const handleMoodLogging = async e => {\n    e.preventDefault();\n    try {\n      const moodData = {\n        mood: moodValue,\n        userId: userId,\n        date: new Date()\n      };\n      await dispatch(createMood(moodData));\n      await dispatch(getMoods(userId));\n      alert(\"Mood logged successfully\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Format the value label for the Slider component\n  const valueLabelFormat = value => emoticons[value - 1];\n\n  // Define animation variants for the motion.div component\n  const emojiVariants = {\n    hidden: {\n      opacity: 0,\n      scale: 0.5\n    },\n    visible: {\n      opacity: 1,\n      scale: 1\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: \"mood-logging-container\",\n      sx: {\n        paddingTop: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(motion.div, {\n        initial: \"hidden\",\n        animate: \"visible\",\n        transition: {\n          duration: 1\n        },\n        variants: emojiVariants,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          fontWeight: \"bold\",\n          children: \"Mood Tracker\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          component: \"span\",\n          gutterBottom: true,\n          children: [\"Select your mood:\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            fontSize: \"2rem\"\n          },\n          children: emoticons[moodValue - 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grow, {\n        in: true,\n        children: /*#__PURE__*/_jsxDEV(Slider, {\n          value: moodValue,\n          min: 1,\n          max: 10,\n          step: 1,\n          onChange: (e, value) => setMoodValue(value),\n          valueLabelDisplay: \"auto\",\n          valueLabelFormat: valueLabelFormat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleMoodLogging,\n        className: \"log-mood-button\",\n        children: \"Log Mood\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(MoodLogging, \"iBx+9DOUMi4GuTG8Oz0+p2K7Sbo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = MoodLogging;\nexport default MoodLogging;\nvar _c;\n$RefreshReg$(_c, \"MoodLogging\");","map":{"version":3,"names":["React","useState","useDispatch","useSelector","createMood","getMoods","Button","Typography","Slider","Box","Grow","styled","motion","jsxDEV","_jsxDEV","MoodLogging","_s","dispatch","userId","state","auth","user","uid","moodValue","setMoodValue","emoticons","handleMoodLogging","e","preventDefault","moodData","mood","date","Date","alert","error","console","valueLabelFormat","value","emojiVariants","hidden","opacity","scale","visible","children","className","sx","paddingTop","div","initial","animate","transition","duration","variants","variant","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","component","gutterBottom","style","fontSize","in","min","max","step","onChange","valueLabelDisplay","onClick","_c","$RefreshReg$"],"sources":["C:/Users/bashc/OneDrive/Documents/Kaar Documents/HappyHelperFinal/src/components/MoodTracker/MoodLogging/index.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createMood, getMoods } from \"../../../store/features/mood/moodSlice\";\r\nimport { Button, Typography, Slider, Box, Grow } from \"@mui/material\";\r\nimport { styled } from \"@mui/system\";\r\nimport { motion } from \"framer-motion\";\r\nimport \"./logging.css\";\r\n\r\nconst MoodLogging = () => {\r\n  // Initialize Redux hooks and local state\r\n  const dispatch = useDispatch();\r\n  const userId = useSelector((state) => state.auth.user.uid);\r\n  const [moodValue, setMoodValue] = useState(5);\r\n\r\n  // Define mood emoticons\r\n  const emoticons = [\"😭\", \"😢\", \"😔\", \"😐\", \"🙂\", \"😀\", \"😄\", \"😁\", \"😆\", \"😍\"];\r\n\r\n  // Handle mood logging by dispatching Redux actions\r\n  const handleMoodLogging = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const moodData = {\r\n        mood: moodValue,\r\n        userId: userId,\r\n        date: new Date(),\r\n      };\r\n      await dispatch(createMood(moodData));\r\n      await dispatch(getMoods(userId));\r\n      alert(\"Mood logged successfully\");\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  // Format the value label for the Slider component\r\n  const valueLabelFormat = (value) => emoticons[value - 1];\r\n\r\n  // Define animation variants for the motion.div component\r\n  const emojiVariants = {\r\n    hidden: { opacity: 0, scale: 0.5 },\r\n    visible: { opacity: 1, scale: 1 },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Box className=\"mood-logging-container\" sx={{ paddingTop: 2 }}>\r\n        {/* Animate the mood selection text and emoticon */}\r\n\r\n        <motion.div initial=\"hidden\" animate=\"visible\" transition={{ duration: 1 }} variants={emojiVariants}>\r\n          <Typography variant=\"h2\" fontWeight=\"bold\">\r\n            Mood Tracker\r\n          </Typography>\r\n          <Typography variant=\"body1\" component={\"span\"} gutterBottom>\r\n            Select your mood:{\" \"}\r\n          </Typography>{\" \"}\r\n          <Typography component={\"span\"} style={{ fontSize: \"2rem\" }}>\r\n            {emoticons[moodValue - 1]}\r\n          </Typography>\r\n        </motion.div>\r\n        {/* Render the Slider component for selecting mood value */}\r\n        <Grow in>\r\n          <Slider\r\n            value={moodValue}\r\n            min={1}\r\n            max={10}\r\n            step={1}\r\n            onChange={(e, value) => setMoodValue(value)}\r\n            valueLabelDisplay=\"auto\"\r\n            valueLabelFormat={valueLabelFormat}\r\n          />\r\n        </Grow>\r\n              {/* Render the \"Log Mood\" button */}\r\n        <br/>\r\n        <Button variant=\"contained\" onClick={handleMoodLogging} className=\"log-mood-button\">\r\n          Log Mood\r\n        </Button>\r\n      </Box>\r\n      <br></br>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoodLogging;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}