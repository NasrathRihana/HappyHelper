{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport app from \"../../../utils/firebase\";\nexport const moodSlice = createSlice({\n  name: \"mood\",\n  initialState: {\n    loading: false,\n    moods: []\n  },\n  reducers: {\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setMoods: (state, action) => {\n      state.moods = action.payload;\n    }\n  }\n});\nexport const {\n  setLoading,\n  setMoods\n} = moodSlice.actions;\nexport const createMood = moodData => {\n  return async dispatch => {\n    try {\n      dispatch(setLoading(true));\n      const moodsCollection = app.firestore().collection(\"users\").doc(moodData.userId).collection(\"moods\");\n      await moodsCollection.add(moodData);\n      dispatch(setLoading(false));\n    } catch (error) {\n      console.error(error);\n      dispatch(setLoading(false));\n    }\n  };\n};\nexport const getMoods = userId => {\n  return async dispatch => {\n    try {\n      dispatch(setLoading(true));\n      const moodsCollection = app.firestore().collection(\"users\").doc(userId).collection(\"moods\");\n      const querySnapshot = await moodsCollection.where(\"userId\", \"==\", userId).orderBy(\"date\", \"asc\").get();\n      const moods = [];\n      querySnapshot.forEach(doc => {\n        moods.push({\n          id: doc.id,\n          ...doc.data()\n        });\n      });\n      dispatch(setMoods(moods));\n      dispatch(setLoading(false));\n    } catch (error) {\n      console.error(error);\n      dispatch(setLoading(false));\n    }\n  };\n};\nexport default moodSlice.reducer;","map":{"version":3,"names":["createSlice","app","moodSlice","name","initialState","loading","moods","reducers","setLoading","state","action","payload","setMoods","actions","createMood","moodData","dispatch","moodsCollection","firestore","collection","doc","userId","add","error","console","getMoods","querySnapshot","where","orderBy","get","forEach","push","id","data","reducer"],"sources":["C:/Users/bashc/OneDrive/Documents/Kaar Documents/HappyHelperFinal/src/store/features/mood/moodSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport app from \"../../../utils/firebase\";\r\n\r\nexport const moodSlice = createSlice({\r\n  name: \"mood\",\r\n  initialState: {\r\n    loading: false,\r\n    moods: [],\r\n  },\r\n  reducers: {\r\n    setLoading: (state, action) => {\r\n      state.loading = action.payload;\r\n    },\r\n    setMoods: (state, action) => {\r\n      state.moods = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setLoading, setMoods } = moodSlice.actions;\r\n\r\nexport const createMood = (moodData) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(setLoading(true));\r\n      const moodsCollection = app\r\n        .firestore()\r\n        .collection(\"users\")\r\n        .doc(moodData.userId)\r\n        .collection(\"moods\");\r\n      await moodsCollection.add(moodData);\r\n      dispatch(setLoading(false));\r\n    } catch (error) {\r\n      console.error(error);\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const getMoods = (userId) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(setLoading(true));\r\n      const moodsCollection = app\r\n        .firestore()\r\n        .collection(\"users\")\r\n        .doc(userId)\r\n        .collection(\"moods\");\r\n      const querySnapshot = await moodsCollection\r\n        .where(\"userId\", \"==\", userId)\r\n        .orderBy(\"date\", \"asc\")\r\n        .get();\r\n      const moods = [];\r\n      querySnapshot.forEach((doc) => {\r\n        moods.push({ id: doc.id, ...doc.data() });\r\n      });\r\n      dispatch(setMoods(moods));\r\n      dispatch(setLoading(false));\r\n    } catch (error) {\r\n      console.error(error);\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport default moodSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,GAAG,MAAM,yBAAyB;AAEzC,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;EACnCG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACJ,OAAO,GAAGK,MAAM,CAACC,OAAO;IAChC,CAAC;IACDC,QAAQ,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC3BD,KAAK,CAACH,KAAK,GAAGI,MAAM,CAACC,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,UAAU;EAAEI;AAAS,CAAC,GAAGV,SAAS,CAACW,OAAO;AAEzD,OAAO,MAAMC,UAAU,GAAIC,QAAQ,IAAK;EACtC,OAAO,MAAOC,QAAQ,IAAK;IACzB,IAAI;MACFA,QAAQ,CAACR,UAAU,CAAC,IAAI,CAAC,CAAC;MAC1B,MAAMS,eAAe,GAAGhB,GAAG,CACxBiB,SAAS,EAAE,CACXC,UAAU,CAAC,OAAO,CAAC,CACnBC,GAAG,CAACL,QAAQ,CAACM,MAAM,CAAC,CACpBF,UAAU,CAAC,OAAO,CAAC;MACtB,MAAMF,eAAe,CAACK,GAAG,CAACP,QAAQ,CAAC;MACnCC,QAAQ,CAACR,UAAU,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpBP,QAAQ,CAACR,UAAU,CAAC,KAAK,CAAC,CAAC;IAC7B;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMiB,QAAQ,GAAIJ,MAAM,IAAK;EAClC,OAAO,MAAOL,QAAQ,IAAK;IACzB,IAAI;MACFA,QAAQ,CAACR,UAAU,CAAC,IAAI,CAAC,CAAC;MAC1B,MAAMS,eAAe,GAAGhB,GAAG,CACxBiB,SAAS,EAAE,CACXC,UAAU,CAAC,OAAO,CAAC,CACnBC,GAAG,CAACC,MAAM,CAAC,CACXF,UAAU,CAAC,OAAO,CAAC;MACtB,MAAMO,aAAa,GAAG,MAAMT,eAAe,CACxCU,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAEN,MAAM,CAAC,CAC7BO,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CACtBC,GAAG,EAAE;MACR,MAAMvB,KAAK,GAAG,EAAE;MAChBoB,aAAa,CAACI,OAAO,CAAEV,GAAG,IAAK;QAC7Bd,KAAK,CAACyB,IAAI,CAAC;UAAEC,EAAE,EAAEZ,GAAG,CAACY,EAAE;UAAE,GAAGZ,GAAG,CAACa,IAAI;QAAG,CAAC,CAAC;MAC3C,CAAC,CAAC;MACFjB,QAAQ,CAACJ,QAAQ,CAACN,KAAK,CAAC,CAAC;MACzBU,QAAQ,CAACR,UAAU,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpBP,QAAQ,CAACR,UAAU,CAAC,KAAK,CAAC,CAAC;IAC7B;EACF,CAAC;AACH,CAAC;AAED,eAAeN,SAAS,CAACgC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}