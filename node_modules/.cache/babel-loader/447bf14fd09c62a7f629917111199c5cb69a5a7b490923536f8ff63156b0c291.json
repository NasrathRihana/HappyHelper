{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bashc\\\\OneDrive\\\\Documents\\\\Kaar Documents\\\\HappyHelperFinal\\\\src\\\\components\\\\GoalSetting\\\\index.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import firebase from \"../../utils/firebase\";\n// import { useSelector } from \"react-redux\";\n// import {\n//     Button,\n//     Container,\n//     Typography,\n//     TextField,\n//     InputAdornment,\n// } from \"@mui/material\";\n\n// const GoalSetting = () => {\n//     const [goals, setGoals] = useState([]);\n//     const [newGoal, setNewGoal] = useState(\"\");\n//     const [newReminder, setNewReminder] = useState(\"\");\n//     const user = useSelector((state) => state.auth.user);\n//     const uid = user.uid;\n\n//     const goalsRef = firebase\n//         .firestore()\n//         .collection(\"users\")\n//         .doc(uid)\n//         .collection(\"goals\");\n\n//     useEffect(() => {\n//         const fetchGoals = async () => {\n//             const goalsSnapshot = await goalsRef.get();\n//             const goalsData = goalsSnapshot.docs.map((doc) => {\n//                 const data = doc.data();\n//                 return { ...data, id: doc.id };\n//             });\n//             setGoals(goalsData);\n//         };\n\n//         fetchGoals();\n//         // eslint-disable-next-line\n//     }, []);\n\n//     const handleUpdateGoal = async (goalId, updatedGoal) => {\n//         await goalsRef.doc(goalId).update({\n//             title: updatedGoal,\n//         });\n//         const updatedGoals = goals.map((goal) => {\n//             if (goal.id === goalId) {\n//                 return { ...goal, title: updatedGoal, isEditing: false };\n//             }\n//             return goal;\n//         });\n//         setGoals(updatedGoals);\n//     };\n\n//     const handleAddReminder = async (goalId) => {\n//         if (newReminder.trim()) {\n//             const goalDoc = await goalsRef.doc(goalId).get();\n//             const goalData = goalDoc.data();\n//             const existingReminders = goalData.reminders || [];\n//             const updatedReminders = [\n//                 ...existingReminders,\n//                 { text: newReminder },\n//             ];\n//             await goalsRef.doc(goalId).update({\n//                 reminders: updatedReminders,\n//             });\n//             const updatedGoals = goals.map((goal) => {\n//                 if (goal.id === goalId) {\n//                     return { ...goal, reminders: updatedReminders };\n//                 }\n//                 return goal;\n//             });\n//             setGoals(updatedGoals);\n//             setNewReminder(\"\");\n//         }\n//     };\n\n//     const handleAddGoal = async () => {\n//         if (newGoal.trim()) {\n//             const goalData = {\n//                 title: newGoal.trim(),\n//                 createdAt: Date.now(),\n//                 uid: uid,\n//             };\n//             const goalRef = await goalsRef.add(goalData);\n//             goalData.id = goalRef.id;\n//             setGoals([...goals, goalData]);\n//             setNewGoal(\"\");\n//         }\n//     };\n\n//     const handleUpdateReminders = async (goalId, updatedReminders) => {\n//         await goalsRef.doc(goalId).update({\n//             reminders: updatedReminders,\n//         });\n//         const updatedGoals = goals.map((goal) => {\n//             if (goal.id === goalId) {\n//                 return { ...goal, reminders: updatedReminders };\n//             }\n//             return goal;\n//         });\n//         setGoals(updatedGoals);\n//     };\n\n//     const handleEditReminder = async (\n//         goalId,\n//         reminderIndex,\n//         newReminderText\n//     ) => {\n//         const updatedReminders = [\n//             ...goals.find((goal) => goal.id === goalId).reminders,\n//         ];\n//         updatedReminders[reminderIndex].text = newReminderText;\n//         await handleUpdateReminders(goalId, updatedReminders);\n//     };\n//     return (\n//         <Container\n//             fullWidth\n//             style={{\n//                 justifyContent: \"center\",\n//                 display: \"flex\",\n//                 flexDirection: \"column\",\n//                 alignItems: \"center\",\n//                 fontSize: \"1.3rem\",\n//             }}\n//         >\n//             <Typography variant=\"h4\" fontWeight=\"bold\" sx={{ mt: 2 }}>\n//                 Goal Tracker\n//             </Typography>\n//             <div>\n//                 <TextField\n//                     value={newGoal}\n//                     onChange={(e) => setNewGoal(e.target.value)}\n//                     placeholder=\"Enter a new goal\"\n//                     sx={{ mt: 2 }}\n//                     InputProps={{\n//                         endAdornment: (\n//                             <InputAdornment position=\"end\">\n//                                 <Button\n//                                     variant=\"contained\"\n//                                     onClick={handleAddGoal}\n//                                     size=\"large\"\n//                                 >\n//                                     Add Goal\n//                                 </Button>\n//                             </InputAdornment>\n//                         ),\n//                     }}\n//                 />\n//             </div>\n//             <div>\n//                 {goals.map((goal, index) => (\n//                     <div key={index}>\n//                         <div>\n//                             {goal.isEditing ? (\n//                                 <>\n//                                     <TextField\n//                                         value={goal.title}\n//                                         onChange={(e) => {\n//                                             const updatedGoals = [...goals];\n//                                             const index =\n//                                                 updatedGoals.findIndex(\n//                                                     (g) => g.id === goal.id\n//                                                 );\n//                                             updatedGoals[index].title =\n//                                                 e.target.value;\n//                                             setGoals(updatedGoals);\n//                                         }}\n//                                         InputProps={{\n//                                             endAdornment: (\n//                                                 <InputAdornment position=\"end\">\n//                                                     <Button\n//                                                         variant=\"contained\"\n//                                                         onClick={() =>\n//                                                             handleUpdateGoal(\n//                                                                 goal.id,\n//                                                                 goal.title\n//                                                             )\n//                                                         }\n//                                                         size=\"small\"\n//                                                         sx={{ mr: 1 }}\n//                                                     >\n//                                                         Update\n//                                                     </Button>\n//                                                     <Button\n//                                                         variant=\"contained\"\n//                                                         onClick={() => {\n//                                                             const updatedGoals =\n//                                                                 [...goals];\n//                                                             updatedGoals[\n//                                                                 index\n//                                                             ].isEditing = false;\n//                                                             setGoals(\n//                                                                 updatedGoals\n//                                                             );\n//                                                         }}\n//                                                         size=\"small\"\n//                                                     >\n//                                                         Cancel\n//                                                     </Button>\n//                                                 </InputAdornment>\n//                                             ),\n//                                         }}\n//                                     />\n//                                 </>\n//                             ) : (\n//                                 <div\n//                                     style={{\n//                                         display: \"flex\",\n//                                         justifyContent: \"space-between\",\n//                                         paddingTop: \"2rem\",\n//                                         paddingBottom: \"0.5rem\",\n//                                     }}\n//                                 >\n//                                     <Typography variant=\"h6\">\n//                                         {goal.title}\n//                                     </Typography>\n//                                     <Button\n//                                         size=\"small\"\n//                                         variant=\"contained\"\n//                                         onClick={() => {\n//                                             const updatedGoals = [...goals];\n//                                             updatedGoals[\n//                                                 index\n//                                             ].isEditing = true;\n//                                             setGoals(updatedGoals);\n//                                         }}\n//                                     >\n//                                         Edit\n//                                     </Button>\n//                                 </div>\n//                             )}\n//                         </div>\n//                         <div>\n//                             <TextField\n//                                 value={newReminder}\n//                                 onChange={(e) => setNewReminder(e.target.value)}\n//                                 placeholder=\"Enter a reminder\"\n//                                 InputProps={{\n//                                     endAdornment: (\n//                                         <InputAdornment position=\"end\">\n//                                             <Button\n//                                                 variant=\"contained\"\n//                                                 onClick={() =>\n//                                                     handleAddReminder(goal.id)\n//                                                 }\n//                                                 size=\"small\"\n//                                             >\n//                                                 Add Goal\n//                                             </Button>\n//                                         </InputAdornment>\n//                                     ),\n//                                 }}\n//                             />\n//                         </div>\n//                         <br />\n//                         <Typography variant=\"h6\">\n//                             Total Reminders:{\" \"}\n//                             {goal.reminders ? goal.reminders.length : 0}\n//                         </Typography>\n//                         <div>\n//                             {goal.reminders &&\n//                                 goal.reminders.map(\n//                                     (reminder, reminderIndex) => (\n//                                         <div\n//                                             key={reminderIndex}\n//                                             style={{\n//                                                 display: \"flex\",\n//                                                 justifyContent: \"space-between\",\n//                                             }}\n//                                         >\n//                                             <TextField\n//                                                 type=\"checkbox\"\n//                                                 aria-label=\"Checkbox for following text input\"\n//                                                 checked={reminder.isChecked}\n//                                                 onChange={() => {\n//                                                     const updatedReminders = [\n//                                                         ...goal.reminders,\n//                                                     ];\n//                                                     updatedReminders[\n//                                                         reminderIndex\n//                                                     ].isChecked =\n//                                                         !reminder.isChecked;\n//                                                     handleUpdateReminders(\n//                                                         goal.id,\n//                                                         updatedReminders\n//                                                     );\n//                                                 }}\n//                                                 sx={{ mt: 1 }}\n//                                             />\n//                                             {reminder.text}\n//                                             <Button\n//                                                 variant=\"contained\"\n//                                                 size=\"small\"\n//                                                 sx={{ mt: 1 }}\n//                                                 onClick={() => {\n//                                                     const newReminderText =\n//                                                         window.prompt(\n//                                                             \"Enter the new reminder text\",\n//                                                             reminder.text\n//                                                         );\n//                                                     if (newReminderText) {\n//                                                         handleEditReminder(\n//                                                             goal.id,\n//                                                             reminderIndex,\n//                                                             newReminderText\n//                                                         );\n//                                                     }\n//                                                 }}\n//                                             >\n//                                                 Edit\n//                                             </Button>\n//                                         </div>\n//                                     )\n//                                 )}\n//                         </div>\n//                         <hr />\n//                     </div>\n//                 ))}\n//             </div>\n//         </Container>\n//     );\n// };\n\n// export default GoalSetting;\n\nimport React, { useState } from \"react\";\nimport { Box, Typography, Button } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\nimport NewGoalModal from \"./NewGoalModal\";\nimport GoalsList from \"./GoalsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Introduction = styled(\"p\")`\n  font-size: 16px;\n  margin: 16px 0;\n`;\n_c = Introduction;\nfunction GoalSetting() {\n  _s();\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      maxWidth: {\n        xs: \"90%\",\n        sm: \"90%\",\n        md: \"700px\"\n      },\n      margin: {\n        xs: \"0 auto\",\n        md: \"0 auto\"\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      component: \"h1\",\n      marginTop: 2,\n      align: \"center\",\n      gutterBottom: true,\n      children: \"Goal Setting\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Introduction, {\n      children: \"Set SMART goals to improve your mental well-being and track your progress over time.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleOpen,\n      children: \"Create a New Goal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewGoalModal, {\n      open: open,\n      handleClose: handleClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoalsList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 5\n  }, this);\n}\n_s(GoalSetting, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n_c2 = GoalSetting;\nexport default GoalSetting;\nvar _c, _c2;\n$RefreshReg$(_c, \"Introduction\");\n$RefreshReg$(_c2, \"GoalSetting\");","map":{"version":3,"names":["React","useState","Box","Typography","Button","styled","NewGoalModal","GoalsList","jsxDEV","_jsxDEV","Introduction","_c","GoalSetting","_s","open","setOpen","handleOpen","handleClose","sx","display","flexDirection","justifyContent","alignItems","maxWidth","xs","sm","md","margin","children","variant","component","marginTop","align","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/bashc/OneDrive/Documents/Kaar Documents/HappyHelperFinal/src/components/GoalSetting/index.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import firebase from \"../../utils/firebase\";\r\n// import { useSelector } from \"react-redux\";\r\n// import {\r\n//     Button,\r\n//     Container,\r\n//     Typography,\r\n//     TextField,\r\n//     InputAdornment,\r\n// } from \"@mui/material\";\r\n\r\n// const GoalSetting = () => {\r\n//     const [goals, setGoals] = useState([]);\r\n//     const [newGoal, setNewGoal] = useState(\"\");\r\n//     const [newReminder, setNewReminder] = useState(\"\");\r\n//     const user = useSelector((state) => state.auth.user);\r\n//     const uid = user.uid;\r\n\r\n//     const goalsRef = firebase\r\n//         .firestore()\r\n//         .collection(\"users\")\r\n//         .doc(uid)\r\n//         .collection(\"goals\");\r\n\r\n//     useEffect(() => {\r\n//         const fetchGoals = async () => {\r\n//             const goalsSnapshot = await goalsRef.get();\r\n//             const goalsData = goalsSnapshot.docs.map((doc) => {\r\n//                 const data = doc.data();\r\n//                 return { ...data, id: doc.id };\r\n//             });\r\n//             setGoals(goalsData);\r\n//         };\r\n\r\n//         fetchGoals();\r\n//         // eslint-disable-next-line\r\n//     }, []);\r\n\r\n//     const handleUpdateGoal = async (goalId, updatedGoal) => {\r\n//         await goalsRef.doc(goalId).update({\r\n//             title: updatedGoal,\r\n//         });\r\n//         const updatedGoals = goals.map((goal) => {\r\n//             if (goal.id === goalId) {\r\n//                 return { ...goal, title: updatedGoal, isEditing: false };\r\n//             }\r\n//             return goal;\r\n//         });\r\n//         setGoals(updatedGoals);\r\n//     };\r\n\r\n//     const handleAddReminder = async (goalId) => {\r\n//         if (newReminder.trim()) {\r\n//             const goalDoc = await goalsRef.doc(goalId).get();\r\n//             const goalData = goalDoc.data();\r\n//             const existingReminders = goalData.reminders || [];\r\n//             const updatedReminders = [\r\n//                 ...existingReminders,\r\n//                 { text: newReminder },\r\n//             ];\r\n//             await goalsRef.doc(goalId).update({\r\n//                 reminders: updatedReminders,\r\n//             });\r\n//             const updatedGoals = goals.map((goal) => {\r\n//                 if (goal.id === goalId) {\r\n//                     return { ...goal, reminders: updatedReminders };\r\n//                 }\r\n//                 return goal;\r\n//             });\r\n//             setGoals(updatedGoals);\r\n//             setNewReminder(\"\");\r\n//         }\r\n//     };\r\n\r\n//     const handleAddGoal = async () => {\r\n//         if (newGoal.trim()) {\r\n//             const goalData = {\r\n//                 title: newGoal.trim(),\r\n//                 createdAt: Date.now(),\r\n//                 uid: uid,\r\n//             };\r\n//             const goalRef = await goalsRef.add(goalData);\r\n//             goalData.id = goalRef.id;\r\n//             setGoals([...goals, goalData]);\r\n//             setNewGoal(\"\");\r\n//         }\r\n//     };\r\n\r\n//     const handleUpdateReminders = async (goalId, updatedReminders) => {\r\n//         await goalsRef.doc(goalId).update({\r\n//             reminders: updatedReminders,\r\n//         });\r\n//         const updatedGoals = goals.map((goal) => {\r\n//             if (goal.id === goalId) {\r\n//                 return { ...goal, reminders: updatedReminders };\r\n//             }\r\n//             return goal;\r\n//         });\r\n//         setGoals(updatedGoals);\r\n//     };\r\n\r\n//     const handleEditReminder = async (\r\n//         goalId,\r\n//         reminderIndex,\r\n//         newReminderText\r\n//     ) => {\r\n//         const updatedReminders = [\r\n//             ...goals.find((goal) => goal.id === goalId).reminders,\r\n//         ];\r\n//         updatedReminders[reminderIndex].text = newReminderText;\r\n//         await handleUpdateReminders(goalId, updatedReminders);\r\n//     };\r\n//     return (\r\n//         <Container\r\n//             fullWidth\r\n//             style={{\r\n//                 justifyContent: \"center\",\r\n//                 display: \"flex\",\r\n//                 flexDirection: \"column\",\r\n//                 alignItems: \"center\",\r\n//                 fontSize: \"1.3rem\",\r\n//             }}\r\n//         >\r\n//             <Typography variant=\"h4\" fontWeight=\"bold\" sx={{ mt: 2 }}>\r\n//                 Goal Tracker\r\n//             </Typography>\r\n//             <div>\r\n//                 <TextField\r\n//                     value={newGoal}\r\n//                     onChange={(e) => setNewGoal(e.target.value)}\r\n//                     placeholder=\"Enter a new goal\"\r\n//                     sx={{ mt: 2 }}\r\n//                     InputProps={{\r\n//                         endAdornment: (\r\n//                             <InputAdornment position=\"end\">\r\n//                                 <Button\r\n//                                     variant=\"contained\"\r\n//                                     onClick={handleAddGoal}\r\n//                                     size=\"large\"\r\n//                                 >\r\n//                                     Add Goal\r\n//                                 </Button>\r\n//                             </InputAdornment>\r\n//                         ),\r\n//                     }}\r\n//                 />\r\n//             </div>\r\n//             <div>\r\n//                 {goals.map((goal, index) => (\r\n//                     <div key={index}>\r\n//                         <div>\r\n//                             {goal.isEditing ? (\r\n//                                 <>\r\n//                                     <TextField\r\n//                                         value={goal.title}\r\n//                                         onChange={(e) => {\r\n//                                             const updatedGoals = [...goals];\r\n//                                             const index =\r\n//                                                 updatedGoals.findIndex(\r\n//                                                     (g) => g.id === goal.id\r\n//                                                 );\r\n//                                             updatedGoals[index].title =\r\n//                                                 e.target.value;\r\n//                                             setGoals(updatedGoals);\r\n//                                         }}\r\n//                                         InputProps={{\r\n//                                             endAdornment: (\r\n//                                                 <InputAdornment position=\"end\">\r\n//                                                     <Button\r\n//                                                         variant=\"contained\"\r\n//                                                         onClick={() =>\r\n//                                                             handleUpdateGoal(\r\n//                                                                 goal.id,\r\n//                                                                 goal.title\r\n//                                                             )\r\n//                                                         }\r\n//                                                         size=\"small\"\r\n//                                                         sx={{ mr: 1 }}\r\n//                                                     >\r\n//                                                         Update\r\n//                                                     </Button>\r\n//                                                     <Button\r\n//                                                         variant=\"contained\"\r\n//                                                         onClick={() => {\r\n//                                                             const updatedGoals =\r\n//                                                                 [...goals];\r\n//                                                             updatedGoals[\r\n//                                                                 index\r\n//                                                             ].isEditing = false;\r\n//                                                             setGoals(\r\n//                                                                 updatedGoals\r\n//                                                             );\r\n//                                                         }}\r\n//                                                         size=\"small\"\r\n//                                                     >\r\n//                                                         Cancel\r\n//                                                     </Button>\r\n//                                                 </InputAdornment>\r\n//                                             ),\r\n//                                         }}\r\n//                                     />\r\n//                                 </>\r\n//                             ) : (\r\n//                                 <div\r\n//                                     style={{\r\n//                                         display: \"flex\",\r\n//                                         justifyContent: \"space-between\",\r\n//                                         paddingTop: \"2rem\",\r\n//                                         paddingBottom: \"0.5rem\",\r\n//                                     }}\r\n//                                 >\r\n//                                     <Typography variant=\"h6\">\r\n//                                         {goal.title}\r\n//                                     </Typography>\r\n//                                     <Button\r\n//                                         size=\"small\"\r\n//                                         variant=\"contained\"\r\n//                                         onClick={() => {\r\n//                                             const updatedGoals = [...goals];\r\n//                                             updatedGoals[\r\n//                                                 index\r\n//                                             ].isEditing = true;\r\n//                                             setGoals(updatedGoals);\r\n//                                         }}\r\n//                                     >\r\n//                                         Edit\r\n//                                     </Button>\r\n//                                 </div>\r\n//                             )}\r\n//                         </div>\r\n//                         <div>\r\n//                             <TextField\r\n//                                 value={newReminder}\r\n//                                 onChange={(e) => setNewReminder(e.target.value)}\r\n//                                 placeholder=\"Enter a reminder\"\r\n//                                 InputProps={{\r\n//                                     endAdornment: (\r\n//                                         <InputAdornment position=\"end\">\r\n//                                             <Button\r\n//                                                 variant=\"contained\"\r\n//                                                 onClick={() =>\r\n//                                                     handleAddReminder(goal.id)\r\n//                                                 }\r\n//                                                 size=\"small\"\r\n//                                             >\r\n//                                                 Add Goal\r\n//                                             </Button>\r\n//                                         </InputAdornment>\r\n//                                     ),\r\n//                                 }}\r\n//                             />\r\n//                         </div>\r\n//                         <br />\r\n//                         <Typography variant=\"h6\">\r\n//                             Total Reminders:{\" \"}\r\n//                             {goal.reminders ? goal.reminders.length : 0}\r\n//                         </Typography>\r\n//                         <div>\r\n//                             {goal.reminders &&\r\n//                                 goal.reminders.map(\r\n//                                     (reminder, reminderIndex) => (\r\n//                                         <div\r\n//                                             key={reminderIndex}\r\n//                                             style={{\r\n//                                                 display: \"flex\",\r\n//                                                 justifyContent: \"space-between\",\r\n//                                             }}\r\n//                                         >\r\n//                                             <TextField\r\n//                                                 type=\"checkbox\"\r\n//                                                 aria-label=\"Checkbox for following text input\"\r\n//                                                 checked={reminder.isChecked}\r\n//                                                 onChange={() => {\r\n//                                                     const updatedReminders = [\r\n//                                                         ...goal.reminders,\r\n//                                                     ];\r\n//                                                     updatedReminders[\r\n//                                                         reminderIndex\r\n//                                                     ].isChecked =\r\n//                                                         !reminder.isChecked;\r\n//                                                     handleUpdateReminders(\r\n//                                                         goal.id,\r\n//                                                         updatedReminders\r\n//                                                     );\r\n//                                                 }}\r\n//                                                 sx={{ mt: 1 }}\r\n//                                             />\r\n//                                             {reminder.text}\r\n//                                             <Button\r\n//                                                 variant=\"contained\"\r\n//                                                 size=\"small\"\r\n//                                                 sx={{ mt: 1 }}\r\n//                                                 onClick={() => {\r\n//                                                     const newReminderText =\r\n//                                                         window.prompt(\r\n//                                                             \"Enter the new reminder text\",\r\n//                                                             reminder.text\r\n//                                                         );\r\n//                                                     if (newReminderText) {\r\n//                                                         handleEditReminder(\r\n//                                                             goal.id,\r\n//                                                             reminderIndex,\r\n//                                                             newReminderText\r\n//                                                         );\r\n//                                                     }\r\n//                                                 }}\r\n//                                             >\r\n//                                                 Edit\r\n//                                             </Button>\r\n//                                         </div>\r\n//                                     )\r\n//                                 )}\r\n//                         </div>\r\n//                         <hr />\r\n//                     </div>\r\n//                 ))}\r\n//             </div>\r\n//         </Container>\r\n//     );\r\n// };\r\n\r\n// export default GoalSetting;\r\n\r\nimport React, { useState } from \"react\";\r\nimport { Box, Typography, Button } from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport NewGoalModal from \"./NewGoalModal\";\r\nimport GoalsList from \"./GoalsList\";\r\n\r\nconst Introduction = styled(\"p\")`\r\n  font-size: 16px;\r\n  margin: 16px 0;\r\n`;\r\n\r\nfunction GoalSetting() {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        maxWidth: { xs: \"90%\", sm: \"90%\", md: \"700px\" },\r\n        margin: { xs: \"0 auto\", md: \"0 auto\" },\r\n      }}\r\n    >\r\n      <Typography variant=\"h4\" component=\"h1\" marginTop={2} align=\"center\" gutterBottom>\r\n        Goal Setting\r\n      </Typography>\r\n      <Introduction>Set SMART goals to improve your mental well-being and track your progress over time.</Introduction>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleOpen}>\r\n        Create a New Goal\r\n      </Button>\r\n      <NewGoalModal open={open} handleClose={handleClose} />\r\n      <GoalsList />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default GoalSetting;\r\n"],"mappingsvC,SAASC,GAAG,EAAEC,UAAU,EAAEC,MAAM,QAAQ,eAAe;AACvD,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAY,GAAGL,MAAM,CAAC,GAAG,CAAE;AACjC;AACA;AACA,CAAC;AAACM,EAAA,GAHID,YAAY;AAKlB,SAASE,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAEvC,MAAMe,UAAU,GAAGA,CAAA,KAAM;IACvBD,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,MAAME,WAAW,GAAGA,CAAA,KAAM;IACxBF,OAAO,CAAC,KAAK,CAAC;EAChB,CAAC;EAED,oBACEN,OAAA,CAACP,GAAG;IACFgB,EAAE,EAAE;MACFC,OAAO,EAAE,MAAM;MACfC,aAAa,EAAE,QAAQ;MACvBC,cAAc,EAAE,QAAQ;MACxBC,UAAU,EAAE,QAAQ;MACpBC,QAAQ,EAAE;QAAEC,EAAE,EAAE,KAAK;QAAEC,EAAE,EAAE,KAAK;QAAEC,EAAE,EAAE;MAAQ,CAAC;MAC/CC,MAAM,EAAE;QAAEH,EAAE,EAAE,QAAQ;QAAEE,EAAE,EAAE;MAAS;IACvC,CAAE;IAAAE,QAAA,gBAEFnB,OAAA,CAACN,UAAU;MAAC0B,OAAO,EAAC,IAAI;MAACC,SAAS,EAAC,IAAI;MAACC,SAAS,EAAE,CAAE;MAACC,KAAK,EAAC,QAAQ;MAACC,YAAY;MAAAL,QAAA,EAAC;IAElF;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAa,eACb5B,OAAA,CAACC,YAAY;MAAAkB,QAAA,EAAC;IAAoF;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAe,eACjH5B,OAAA,CAACL,MAAM;MAACyB,OAAO,EAAC,WAAW;MAACS,KAAK,EAAC,SAAS;MAACC,OAAO,EAAEvB,UAAW;MAAAY,QAAA,EAAC;IAEjE;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eACT5B,OAAA,CAACH,YAAY;MAACQ,IAAI,EAAEA,IAAK;MAACG,WAAW,EAAEA;IAAY;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACtD5B,OAAA,CAACF,SAAS;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACT;AAEV;AAACxB,EAAA,CAjCQD,WAAW;AAAA4B,GAAA,GAAX5B,WAAW;AAmCpB,eAAeA,WAAW;AAAC,IAAAD,EAAA,EAAA6B,GAAA;AAAAC,YAAA,CAAA9B,EAAA;AAAA8B,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}